// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: Serve.proto

package Serve

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WriteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WriteArgs) Reset() {
	*x = WriteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Serve_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteArgs) ProtoMessage() {}

func (x *WriteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_Serve_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteArgs.ProtoReflect.Descriptor instead.
func (*WriteArgs) Descriptor() ([]byte, []int) {
	return file_Serve_proto_rawDescGZIP(), []int{0}
}

func (x *WriteArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteArgs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type WriteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLeader bool `protobuf:"varint,1,opt,name=isLeader,proto3" json:"isLeader,omitempty"` // 重定向Leader
	Success  bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *WriteReply) Reset() {
	*x = WriteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Serve_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteReply) ProtoMessage() {}

func (x *WriteReply) ProtoReflect() protoreflect.Message {
	mi := &file_Serve_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteReply.ProtoReflect.Descriptor instead.
func (*WriteReply) Descriptor() ([]byte, []int) {
	return file_Serve_proto_rawDescGZIP(), []int{1}
}

func (x *WriteReply) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *WriteReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ReadArgs) Reset() {
	*x = ReadArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Serve_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArgs) ProtoMessage() {}

func (x *ReadArgs) ProtoReflect() protoreflect.Message {
	mi := &file_Serve_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArgs.ProtoReflect.Descriptor instead.
func (*ReadArgs) Descriptor() ([]byte, []int) {
	return file_Serve_proto_rawDescGZIP(), []int{2}
}

func (x *ReadArgs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ReadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLeader bool   `protobuf:"varint,1,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReadReply) Reset() {
	*x = ReadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Serve_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReply) ProtoMessage() {}

func (x *ReadReply) ProtoReflect() protoreflect.Message {
	mi := &file_Serve_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReply.ProtoReflect.Descriptor instead.
func (*ReadReply) Descriptor() ([]byte, []int) {
	return file_Serve_proto_rawDescGZIP(), []int{3}
}

func (x *ReadReply) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *ReadReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_Serve_proto protoreflect.FileDescriptor

var file_Serve_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a,
	0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x56, 0x0a, 0x05, 0x53, 0x65, 0x72, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x0b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x0a, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_Serve_proto_rawDescOnce sync.Once
	file_Serve_proto_rawDescData = file_Serve_proto_rawDesc
)

func file_Serve_proto_rawDescGZIP() []byte {
	file_Serve_proto_rawDescOnce.Do(func() {
		file_Serve_proto_rawDescData = protoimpl.X.CompressGZIP(file_Serve_proto_rawDescData)
	})
	return file_Serve_proto_rawDescData
}

var file_Serve_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_Serve_proto_goTypes = []interface{}{
	(*WriteArgs)(nil),  // 0: WriteArgs
	(*WriteReply)(nil), // 1: WriteReply
	(*ReadArgs)(nil),   // 2: ReadArgs
	(*ReadReply)(nil),  // 3: ReadReply
}
var file_Serve_proto_depIdxs = []int32{
	0, // 0: Serve.WriteRequest:input_type -> WriteArgs
	2, // 1: Serve.ReadRequest:input_type -> ReadArgs
	1, // 2: Serve.WriteRequest:output_type -> WriteReply
	3, // 3: Serve.ReadRequest:output_type -> ReadReply
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Serve_proto_init() }
func file_Serve_proto_init() {
	if File_Serve_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Serve_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Serve_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Serve_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Serve_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Serve_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Serve_proto_goTypes,
		DependencyIndexes: file_Serve_proto_depIdxs,
		MessageInfos:      file_Serve_proto_msgTypes,
	}.Build()
	File_Serve_proto = out.File
	file_Serve_proto_rawDesc = nil
	file_Serve_proto_goTypes = nil
	file_Serve_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServeClient is the client API for Serve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServeClient interface {
	WriteRequest(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error)
	ReadRequest(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReply, error)
}

type serveClient struct {
	cc grpc.ClientConnInterface
}

func NewServeClient(cc grpc.ClientConnInterface) ServeClient {
	return &serveClient{cc}
}

func (c *serveClient) WriteRequest(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/Serve/WriteRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveClient) ReadRequest(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/Serve/ReadRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServeServer is the server API for Serve service.
type ServeServer interface {
	WriteRequest(context.Context, *WriteArgs) (*WriteReply, error)
	ReadRequest(context.Context, *ReadArgs) (*ReadReply, error)
}

// UnimplementedServeServer can be embedded to have forward compatible implementations.
type UnimplementedServeServer struct {
}

func (*UnimplementedServeServer) WriteRequest(context.Context, *WriteArgs) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRequest not implemented")
}
func (*UnimplementedServeServer) ReadRequest(context.Context, *ReadArgs) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRequest not implemented")
}

func RegisterServeServer(s *grpc.Server, srv ServeServer) {
	s.RegisterService(&_Serve_serviceDesc, srv)
}

func _Serve_WriteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).WriteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Serve/WriteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).WriteRequest(ctx, req.(*WriteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serve_ReadRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).ReadRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Serve/ReadRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).ReadRequest(ctx, req.(*ReadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Serve_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Serve",
	HandlerType: (*ServeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRequest",
			Handler:    _Serve_WriteRequest_Handler,
		},
		{
			MethodName: "ReadRequest",
			Handler:    _Serve_ReadRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Serve.proto",
}
